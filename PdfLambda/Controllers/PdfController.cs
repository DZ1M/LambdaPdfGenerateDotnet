using Amazon.S3;
using Amazon.S3.Model;
using Microsoft.AspNetCore.Mvc;
using PdfLambda.Model;
using System;
using System.IO;
using System.Threading.Tasks;
using WkHtmlToPdfDotNet;

namespace PdfLambda.Controllers
{
    [Route("api/[controller]")]
    public class PdfController : Controller
    {
        private readonly IPdfGeneratorHelper _generator;
        private readonly IAmazonS3 _amazon;
        public PdfController(IPdfGeneratorHelper generator)
        {
            _generator = generator;
        }
        /// <summary>
        /// Gera o PDF
        /// </summary>
        /// <returns>Retorna em Bytes o Arquivo PDF</returns>
        [HttpGet("Generate")]
        public IActionResult GeneratePdf()
        {

            var pdf = _generator.Generate("<h1>Hello World - Generated Bytes</h1>", Orientation.Portrait);

            return Ok(new FilePDF(pdf, "application/pdf"));
        }
        /// <summary>
        /// Gera o PDF e Insere no s3
        /// </summary>
        /// <returns>Retorna o Link do Arquivo gerado</returns>
        [HttpGet("GenerateV2")]
        public async Task<IActionResult> GenerateV2()
        {
            var pdfStream = _generator.Generate("<h1>Hello World - Upload in S3</h1>", Orientation.Portrait);
            var name = Guid.NewGuid();
            using (var stream = new MemoryStream(pdfStream))
            {
                var putRequest = new PutObjectRequest
                {
                    BucketName = "name-of-bucket",
                    Key = $"{name}",
                    InputStream = stream
                };
                await _amazon.PutObjectAsync(putRequest);
            }

            return Ok($"url-aws-s3/{name}");
        }
    }
}
